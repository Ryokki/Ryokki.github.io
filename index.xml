<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ryokki Blog</title>
    <link>https://ryokki.github.io/</link>
    <description>Recent content on Ryokki Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 19 Feb 2025 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ryokki.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>内存屏障的前世今生</title>
        <link>https://ryokki.github.io/posts/021.-%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</link>
        <pubDate>Wed, 19 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ryokki.github.io/posts/021.-%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</guid>
        <description>Ryokki Blog https://ryokki.github.io/posts/021.-%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/ -&lt;p&gt;参考 &lt;a href=&#34;https://www.hitzhangjie.pro/blog/2021-04-17-locks%E5%AE%9E%E7%8E%B0%E9%82%A3%E4%BA%9B%E4%B8%8D%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84%E6%95%85%E4%BA%8B/&#34;&gt;Locks实现:背后不为人知的故事 - MySpace&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以及下面两个视频很清楚解释了cpu cache,MESI, store buffer/invalidation queue, 内存屏障的历史演进&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;【面试官问我MESI如何保证内存一致性，我把这个动画甩给他】 &lt;a href=&#34;https://www.bilibili.com/video/BV1kD4y1T7XU/?share_source=copy_web&amp;amp;vd_source=6d5bbefdbb303f5c1b77aaeaa935d3de&#34;&gt;https://www.bilibili.com/video/BV1kD4y1T7XU/?share_source=copy_web&amp;amp;vd_source=6d5bbefdbb303f5c1b77aaeaa935d3de&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;【美团一面问我内存屏障和volatile的关系，我说了20分钟】 &lt;a href=&#34;https://www.bilibili.com/video/BV1cT411a7Sn/?share_source=copy_web&amp;amp;vd_source=6d5bbefdbb303f5c1b77aaeaa935d3de&#34;&gt;https://www.bilibili.com/video/BV1cT411a7Sn/?share_source=copy_web&amp;amp;vd_source=6d5bbefdbb303f5c1b77aaeaa935d3de&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://kkbabe-picgo.oss-cn-hangzhou.aliyuncs.com/img/20250219215829.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个CPU或CPU Core之间通过总线连接；&lt;/li&gt;
&lt;li&gt;CPU通过总线与主存（memory）连接；&lt;/li&gt;
&lt;li&gt;每个CPU都有自己的本地cache，通过cache一致性协议（如MESI/MESIF）与其他CPU Core维护一个一致的数据视图；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;引入store-buffer&#34;&gt;引入store buffer&lt;/h3&gt;
&lt;p&gt;CPU对cacheline的修改，若直接落cache，一致性协议会引入不小的开销（执行cache一致性协议），CPU会stall执行的指令。为了提高指令吞吐，这里引入了store buffer。&lt;/p&gt;
&lt;p&gt;数据更新不直接写cacheline而是先写到store buffer，后面需要时再&lt;strong&gt;落cache&lt;/strong&gt;并&lt;strong&gt;通知其他cache失效&lt;/strong&gt;（执行cache一致性协议），这样CPU就可以减少stall继续执行指令（store buffer刷新过程不需要cpu参与）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kkbabe-picgo.oss-cn-hangzhou.aliyuncs.com/img/cpu2.png&#34; alt=&#34;cpu2&#34;&gt;&lt;/p&gt;
&lt;p&gt;💡单核时保证了一致性&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;store buffer是个FIFO，同个cpu两个写操作一定是顺序执行的&lt;/li&gt;
&lt;li&gt;同个cpu先写后读，不会出现读到旧数据的情况，因为读的时候会检查store buffer是否有同个地址的写操作&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;引入invalidate-queue&#34;&gt;引入invalidate queue&lt;/h3&gt;
&lt;p&gt;CPU cache更新cacheline后，通知其他CPU更新cache，需通过cache一致性协议，如MESI/MESIF消息invalidate。&lt;/p&gt;
&lt;p&gt;正常来说，收到此通知的CPU应从cache中将对应cacheline标记为无效，但是如果立即执行这个动作的话，CPU会频繁被阻断执行，所以CPU中引入了invalidate queue，收到invalidate通知后缓存起来并立即回复ACK，但延迟处理。&lt;/p&gt;
&lt;p&gt;（invalidate queue 刷新过程不需要cpu参与）&lt;/p&gt;
&lt;h3 id=&#34;引入的问题&#34;&gt;引入的问题&lt;/h3&gt;
&lt;p&gt;这么设计引入的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;store buffer：本地cache更新不能立即被其他CPU或者CPU core观测到了，写操作对外不可见；&lt;/li&gt;
&lt;li&gt;invalidate queue：本地cache没有立即更新数据，上层应用看不到其他CPU更新的数据（其实就是第一点，写操作对外不可见）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;处理器执行操作变化&#34;&gt;处理器执行操作变化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;如果没有store buffer、invalidate queue，MESI，cache如何工作？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当包含变量a的cacheline，其被CPU 0和CPU 1共享，当CPU 0更新该cacheline之后，会发送invalidate给CPU 1，CPU 1随即把对应的cacheline标记为invalidate；&lt;/li&gt;
&lt;li&gt;当CPU 1下次读取变量a的cacheline时，发现标记为了无效，此时发出read请求，CPU 0观测到自己这边对应的cacheline是modified状态，cacheline是最新的，此时会将对应cacheline数据发送给CPU 1，这样CPU 1就观测到了最新的数据；&lt;/li&gt;
&lt;li&gt;CPU 0中cacheline何时写回主存？可能是被淘汰的时候，也可能是别人read的时候，这个我们先不关心。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;如果引入了store buffer、invalidate queue之后，又该如何工作呢？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须要有办法，将该store buffer中的更新，通知到其他CPU，这就是write barrier干的事情。它就是暂停CPU 0执行，并将CPU 0把store buffer中记录的一些更新应用到cache中，此时会触发cache一致性协议MESI通知CPU 1 cacheline invalidate；&lt;/li&gt;
&lt;li&gt;必须要有办法，将CPU 1中invalidate queue记录下来的invalidate对应的cacheline及时清理掉，这就是read barrier干的事情。它就是暂停CPU 1执行，将其invalidate queue中的每个invalidate请求对应的cacheline全部标记为无效，下次读取时从内存或者CPU 0读取最新数据；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;内存屏障&#34;&gt;内存屏障&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;这里的读写屏障要依赖处理器提供的屏障指令&lt;/li&gt;
&lt;li&gt;在屏障指令之上，内核可以按需选择，如Linux在x86平台选择用 &lt;code&gt;lock; addl&lt;/code&gt;来实现读写屏障 smp_mb/smp_rmb/smp_wmb，x86其实也提供了mfence、lfence、sfence。至于Linux为什么这么选择，应该是跟x86实现有关系，一条指令 &lt;code&gt;lock;addl&lt;/code&gt;同时实现全屏障/读屏障/写屏障足矣。&lt;/li&gt;
&lt;li&gt;其他编程语言内存模型，通常会定义一些Happens-Before关系，这里面就隐含了各种屏障的应用。基于屏障实现的各种同步原语如mutex、semaphore等就比较常见了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://kkbabe-picgo.oss-cn-hangzhou.aliyuncs.com/img/image-20250219224237737.png&#34; alt=&#34;image-20250219224237737&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写操作后加入写屏障，就会刷新该cpu的所有store buffer，刷到其他cpu的invaliate queue&lt;/li&gt;
&lt;li&gt;读操作前加入读屏障，就会消费当前cpu的所有invalidate&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;deepseek-r1对演进史的梳理&#34;&gt;DeepSeek-R1对演进史的梳理&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;帮我这个笔记做下补充，例如展开说说演进的历史（结合时间），更具体的例子等等

cpu-memory很慢，引入cache
由于每个cpu都有各自的cache，修改时需要保证其他缓存失效，收到ack后才能继续修改
引入两个队列
Store Buffer：用于提升写操作的性能。更新内存时，直接扔到buffer中，异步更新。buffer执行更新时，也一样是收到其他cpu的缓存失效ack后才能修改【简而言之，Store Buffer 就像一个 “写操作缓冲区”，让 CPU 可以 “先写先走”，从而避免写操作成为性能瓶颈。】
Invalid Queue: Invalidation Queue 的作用就是异步地接收和处理这些来自其他 CPU Core 的 Invalidate Request。 当 CPU Core (例如 CPU1) 收到来自 CPU0 的 Invalidate Request 时，它不会立即暂停当前正在执行的任务，去同步处理缓存失效。 相反，它会将收到的 Invalidate Request 先放入 Invalidation Queue 中排队。 CPU Core 可以继续执行后续的指令，而 Invalidation Queue 会在 后台异步地 从队列中取出 Invalidate Request，并执行相应的缓存失效操作 (例如，标记 Cache Line 为 Invalid)。【简而言之，Invalidation Queue 就像一个 “失效请求缓冲区”，让 CPU 可以异步地处理来自其他 Core 的失效请求，避免因等待失效处理而阻塞 CPU 的正常执行。】


最后的总结很好：cache-&amp;gt;mesi-&amp;gt;two queue-&amp;gt;barrier的演进
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好的！我将结合时间线、具体案例和技术细节，补充并扩展您的笔记内容：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;cpu-cache-与内存一致性演进史&#34;&gt;&lt;strong&gt;CPU Cache 与内存一致性演进史&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;1-单核时代简单缓存1980s前&#34;&gt;&lt;strong&gt;1. 单核时代：简单缓存（1980s前）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;背景&lt;/strong&gt;：CPU 主频快速提升（MHz → GHz），但内存速度仅增长 10 倍，形成 &amp;ldquo;Memory Wall&amp;rdquo;（内存墙）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;早期方案&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;直写（Write-Through）&lt;/strong&gt;：每次写操作同时更新缓存和内存，简单但性能差。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回写（Write-Back）&lt;/strong&gt;：仅更新缓存，标记脏位（Dirty Bit），淘汰时写回内存，提升性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;案例&lt;/strong&gt;：Intel 80386（1985）首次引入片上缓存（8KB），采用简单回写策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;2-多核时代mesi-协议1990s&#34;&gt;&lt;strong&gt;2. 多核时代：MESI 协议（1990s）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问题&lt;/strong&gt;：多核 CPU 各自缓存同一内存地址时，如何保证一致性？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MESI 协议&lt;/strong&gt;（1990 年提出）：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;状态机&lt;/strong&gt;：Modified（独占修改）、Exclusive（独占未修改）、Shared（共享）、Invalid（失效）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;总线嗅探（Bus Snooping）&lt;/strong&gt;：通过监听总线消息（如 &lt;code&gt;Read&lt;/code&gt;/&lt;code&gt;Invalidate&lt;/code&gt;）维护状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能瓶颈&lt;/strong&gt;：每次写操作需广播失效请求，等待所有 CPU 确认（ACK），导致延迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;案例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Intel Pentium Pro（1995）&lt;/strong&gt;：首次实现 MESI，支持多核共享 L2 缓存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AMD K6（1997）&lt;/strong&gt;：采用 MOESI 协议（增加 Owned 状态），优化共享数据场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;3-异步优化store-buffer-与-invalidation-queue2000s&#34;&gt;&lt;strong&gt;3. 异步优化：Store Buffer 与 Invalidation Queue（2000s）&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;31-store-buffer&#34;&gt;&lt;strong&gt;3.1 Store Buffer&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问题&lt;/strong&gt;：MESI 要求写操作必须等待所有 ACK，导致 CPU 停顿（Stall）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：引入 Store Buffer（写缓冲区）。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工作流程&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;CPU 写入时，数据暂存到 Store Buffer，继续执行后续指令。&lt;/li&gt;
&lt;li&gt;后台异步发送 &lt;code&gt;Invalidate&lt;/code&gt; 请求，等待其他 CPU 的 ACK。&lt;/li&gt;
&lt;li&gt;收到所有 ACK 后，数据从 Store Buffer 提交到缓存（Cache Line）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化效果&lt;/strong&gt;：写操作延迟从 100+ 周期降低到 10 周期内。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;副作用&lt;/strong&gt;：导致&lt;strong&gt;内存乱序&lt;/strong&gt;（Memory Reordering），需内存屏障（Memory Barrier）控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;案例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Intel NetBurst（2000）&lt;/strong&gt;：首次引入深度 Store Buffer（20+ entries），提升 Pentium 4 吞吐量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ARMv7（2005）&lt;/strong&gt;：允许弱一致性模型（Weak Memory Model），依赖显式屏障指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;32-invalidation-queue&#34;&gt;&lt;strong&gt;3.2 Invalidation Queue&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问题&lt;/strong&gt;：接收 &lt;code&gt;Invalidate&lt;/code&gt; 请求的 CPU 若同步处理，可能因繁忙延迟 ACK。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：引入 Invalidation Queue（失效队列）。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工作流程&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;收到 &lt;code&gt;Invalidate&lt;/code&gt; 请求时，直接放入队列并立即回复 ACK。&lt;/li&gt;
&lt;li&gt;后台异步处理队列，将对应 Cache Line 标记为 Invalid。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化效果&lt;/strong&gt;：减少 ACK 延迟，提升整体吞吐量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;副作用&lt;/strong&gt;：可能导致 CPU 短暂读到旧数据（需屏障强制清空队列）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;案例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IBM POWER4（2001）&lt;/strong&gt;：首次实现多级 Invalidation Queue，支持 64 核系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AMD Zen（2017）&lt;/strong&gt;：采用分布式失效队列，优化多 CCD 架构延迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;4-内存屏障memory-barrier-2000&#34;&gt;&lt;strong&gt;4. 内存屏障（Memory Barrier） (2000)&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问题&lt;/strong&gt;：Store Buffer 和 Invalidation Queue 导致指令重排，破坏程序顺序一致性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：插入内存屏障指令。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类型&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;写屏障（Store Barrier）&lt;/strong&gt;：清空 Store Buffer，确保屏障前的写操作对其他 CPU 可见。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;读屏障（Load Barrier）&lt;/strong&gt;：清空 Invalidation Queue，确保读到最新数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全屏障（Full Barrier）&lt;/strong&gt;：同时清空 Store Buffer 和 Invalidation Queue。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;案例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Linux 内核（2005+）&lt;/strong&gt;：&lt;code&gt;smp_wmb()&lt;/code&gt;（写屏障）、&lt;code&gt;smp_rmb()&lt;/code&gt;（读屏障）用于同步锁、RCU 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Java volatile（2004）&lt;/strong&gt;：JVM 通过插入 &lt;code&gt;lock addl $0x0, (%esp)&lt;/code&gt; 实现屏障语义。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;典型问题与案例分析&#34;&gt;&lt;strong&gt;典型问题与案例分析&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;1-可见性问题visibility&#34;&gt;&lt;strong&gt;1. 可见性问题（Visibility）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;：双线程循环检查 &lt;code&gt;flag&lt;/code&gt; 变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 线程 A
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;;          &lt;span style=&#34;color:#75715e&#34;&gt;// 写入 Store Buffer，未提交
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;           &lt;span style=&#34;color:#75715e&#34;&gt;// Store Buffer 可能先于 data 提交
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 线程 B
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (flag &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);  &lt;span style=&#34;color:#75715e&#34;&gt;// 看到 flag=1 但 data 可能仍是旧值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(data);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解决&lt;/strong&gt;：在 &lt;code&gt;data=42&lt;/code&gt; 后插入写屏障，在 &lt;code&gt;while&lt;/code&gt; 前插入读屏障。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-乱序问题reordering&#34;&gt;&lt;strong&gt;2. 乱序问题（Reordering）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;：单核指令重排（Alpha 处理器著名案例）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;STORE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;; 存入 Store Buffer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LOAD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;; B 已在缓存中，立即读到 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;其他 CPU 可能看到 &lt;code&gt;B=0&lt;/code&gt; 先于 &lt;code&gt;A=1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解决&lt;/strong&gt;：通过 &lt;code&gt;mfence&lt;/code&gt; 指令禁止重排。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;演进总结&#34;&gt;&lt;strong&gt;演进总结&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;单核缓存 → MESI 协议 → Store Buffer → Invalidation Queue → 内存屏障&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：每一步都通过异步化（Asynchrony）提升吞吐量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复杂度转移&lt;/strong&gt;：硬件优化导致软件需处理可见性和顺序问题，催生并发原语（锁、原子变量、RCU）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;延伸方向&#34;&gt;&lt;strong&gt;延伸方向&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;现代扩展&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MOESI&lt;/strong&gt;：AMD 提出的协议，允许缓存直接共享脏数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Directory-Based 协议&lt;/strong&gt;：NUMA 架构（如 EPYC）用目录集中管理一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;未来趋势&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;硅光互连&lt;/strong&gt;：用光信号加速一致性消息传递（如 Intel 的集成光子学）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异构一致性&lt;/strong&gt;：GPU/CPU 统一内存（如 NVIDIA Hopper 的 NVLink-C2C）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;希望这些补充能让知识结构更完整！如果需要进一步展开某个点，请随时告诉我。&lt;/p&gt;
- https://ryokki.github.io/posts/021.-%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/ - </description>
        </item>
    
    
    
        <item>
        <title>Now</title>
        <link>https://ryokki.github.io/now/</link>
        <pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate>
        
        <guid>https://ryokki.github.io/now/</guid>
        <description>Ryokki Blog https://ryokki.github.io/now/ -&lt;p&gt;看小白debug[[小白debug]]，可以快速过一遍很多中间件&lt;/p&gt;
&lt;p&gt;Now 页面会随着时间和当下生活的优先级而更新，用来&lt;strong&gt;让别人看见这个人现在生活的重点是什么&lt;/strong&gt;，和&lt;strong&gt;提醒自己专注于当下最重要的事&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;学习优先级：（gitlet没动力了写了～～ 感觉没啥用 鸽了 还是想回归基础）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15-445&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 软件设计原则/设计模式/clean architecture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; mysql是怎样运行的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; csapp&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6.S081&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; corekv&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 看看Comparator设计&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 尝试做一个chrome extesion，像parse medium这样简单的就可以啦&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 代码转sql的做个插件 &lt;a href=&#34;https://ssshooter.com/intellij-plugin-dev/&#34;&gt;https://ssshooter.com/intellij-plugin-dev/&lt;/a&gt; &lt;a href=&#34;https://github.com/fuzhengwei/guide-idea-plugin&#34;&gt;https://github.com/fuzhengwei/guide-idea-plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 学netty&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 看看我们AI的rag是怎么做的，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 看一下腾讯问卷DSL设计&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 学做虾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.zhihu.com/column/learn4fun&#34;&gt;闷骚的程序员 - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 重新启动游泳～&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 读on java8重要章节&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 拓扑排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; how gradle/maven works&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=d0gS5TXarXc&#34;&gt;Signals. I spent 2 years to understand this part. - YouTube&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=83M5-NPDeWs&#34;&gt;Sending and Handling Signals in C (kill, signal, sigaction) - YouTube&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 研究学习的整个workflow（包括信息接收，信息存储，项目/时间管理），以及学习方法[[workflow and method]]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; git learn&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 学习(预计10h): (看一些blog &amp;amp;&amp;amp; 调试rezero的代码)
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 学习workflow中看代码的方法，结合实践，写一篇blog&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 输出: git internal blog&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 知识应用(预计20h):  gitlet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 优惠券系统设计 &amp;amp; 分销系统设计 总结&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; java &amp;amp; 并发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; effective-java&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.bilibili.com/video/BV1pt4y1X7kt/?spm_id_from=333.788.top_right_bar_window_default_collection.content.click&amp;amp;vd_source=4ec20761e597840bf51391ed9ddba7ff&#34;&gt;【单例模式】猛男因不懂单例模式，被面试官无情嘲讽_哔哩哔哩_bilibili&lt;/a&gt; 这个视频及相关的并发知识、以及其他的视频都挺适合我的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://ryokki.github.io/now/ - </description>
        </item>
    
    
    
    
    
    
    
    
    
    
  </channel>
</rss> 