<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>https://ryokki.github.io/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 16 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ryokki.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Now</title>
      <link>https://ryokki.github.io/now/</link>
      <pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/now/</guid>
      <description>Now 页面会随着时间和当下生活的优先级而更新，用来让别人看见这个人现在生活的重点是什么，和提醒自己专注于当下最重要的事。
 研究学习的整个workflow（包括信息接收，信息存储，项目/时间管理），以及学习方法 git learn  学习(预计10h): (看一些blog &amp;amp;&amp;amp; 调试rezero的代码) 输出: git internal blog 知识应用(预计20h): gitlet   优惠券系统设计 &amp;amp; 分销系统设计 总结 java &amp;amp; 并发  effective-java 【单例模式】猛男因不懂单例模式，被面试官无情嘲讽_哔哩哔哩_bilibili 这个视频及相关的并发知识、以及其他的视频都挺适合我的   jimmer原理 jimmer/project/jimmer-sql/src/main/java/org/babyfish/jimmer/sql/ast/impl/table/MergedNode.java at main · babyfish-ct/jimmer · GitHub  </description>
    </item>
    
    <item>
      <title>设计优惠券系统(更新中)</title>
      <link>https://ryokki.github.io/posts/%E8%AE%BE%E8%AE%A1%E4%BC%98%E6%83%A0%E5%88%B8%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/posts/%E8%AE%BE%E8%AE%A1%E4%BC%98%E6%83%A0%E5%88%B8%E7%B3%BB%E7%BB%9F/</guid>
      <description>References:
 不会敲代码了 https://www.processon.com/diagraming/664472aaffdb264e78b5e231 谷粒商城 表结构可以参考 https://zhuanlan.zhihu.com/p/520220966 优惠券系统应该如何设计？ vivo优惠券设计 优惠卷 | EhFCptePcp - Xmind 电商系统：优惠券介绍(一) | 人人都是产品经理  vivo优惠券设计 目前，优惠券系统覆盖了优惠券的4个核心要点：创、发、用、计。
 **“创”**指优惠券的创建，包含各种券规则和使用门槛的配置。 **“发”**指优惠券的发放，优惠券系统提供了多种发放优惠券的方式，满足针对不同人群的主动发放和被动发放。 **“用”**指优惠券的使用，包括正向购买商品及反向退款后的优惠券回退。 **“计”**指优惠券的统计，包括优惠券的发放数量、使用数量、使用商品等数据汇总。  提供通用的优惠券服务，独立后的系统架构如下：
为满足各种不同场景的发券需求，优惠券系统提供三种发券方式：统一领券接口、后台定向发券、券码兑换发放。
券和商品之间的关系 优惠券的使用需要和商品关联，可关联所有商品，也可以关联部分商品。为了灵活性地满足运营对于券关联商品的配置，优惠券系统有两种关联方式：
 a. 黑名单。
可用商品 = 全部商品 - 黑名单商品。
黑名单适用于券的可使用商品范围比较广这种情况，全部商品排除掉黑名单商品就是券的可使用范围。
b. 白名单。
可用商品 = 白名单商品。
白名单适用于券的可使用商品范围比较小这种情况，直接配置券的可使用商品。
 除此以外，还有超级黑名单的配置，黑名单和白名单只对单个券有效，超级黑名单对所有券有效。当前优惠券系统提供商品级的关联，后续优惠券会支持商品分类维度的关联，分类维度 + 商品维度可以更灵活地关联优惠券和商品。
思维导图 我们这个优惠券和电商的优惠券有很大的不同
 我们的使用范围一般是指定某些商品，但是电商是指定单品的 我们现在只支持事件触发吧（绑定promoCode后、新用户注册后、我们应该没有主动领券的流程吧，电商是去店铺或者什么地方主动领一些券，是这个店铺给的优惠。但我们是主动给）  需要产品确认下优惠券名字 显示
表结构 coupon_rule:
  id bigint [primary key]
  coupon_rule_type text
  threshold_amount decimal</description>
    </item>
    
    <item>
      <title>design pattern(todo)</title>
      <link>https://ryokki.github.io/posts/design-pattern/</link>
      <pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/posts/design-pattern/</guid>
      <description>References:
 GitHub - Jueee/design-patterns: 《设计模式:可复用面向对象软件的基础》学习笔记  GitHub - ukihsoroy/design-pattern: 🐱‍🏍你不能不学的设计模式合集。    </description>
    </item>
    
    <item>
      <title>jimmer</title>
      <link>https://ryokki.github.io/posts/jimmer/</link>
      <pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/posts/jimmer/</guid>
      <description>References  官方文档  初识 。。。 好多没看懂 先跳过
快速预览 这里，列举三个实体类型，BookStore、Book、Author和TreeNode，作为当前章节所有讨论的前提假设。 @Entity public interface BookStore { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) Long id(); String name(); @Nullable String website(); @OneToMany(mappedBy = &amp;#34;store&amp;#34;) List&amp;lt;Book&amp;gt; books(); } @Entity public interface Book { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) Long id(); @Key String name(); @Key int edition(); BigDecimal price(); @Nullable @ManyToOne BookStore store(); @ManyToMany List&amp;lt;Author&amp;gt; authors(); } @Entity public interface Author { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) UUID id(); @Key String firstName(); @Key String lastName(); Gender gender(); @ManyToMany(mappedBy = &amp;#34;authors&amp;#34;) List&amp;lt;Book&amp;gt; books(); } 任意动态查询 BookTable table = Tables.</description>
    </item>
    
    <item>
      <title>jpa entity lifecycle</title>
      <link>https://ryokki.github.io/posts/jpa-entity-lifecycle/</link>
      <pubDate>Sun, 12 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/posts/jpa-entity-lifecycle/</guid>
      <description>Entity Lifecycle Model in JPA &amp;amp; Hibernate Spring Data JPA: Entity Lifecycle Model | by Suraj Mishra | Javarevisited | Medium、 Hibernate Persistence Context and Object’s LifeCycle | MyArchiBook language agnostic - Using an ORM or plain SQL? - Stack Overflow Hibernate Proxies - Why they&amp;rsquo;re used and how to unproxy them What is Object/Relational Mapping? - Hibernate ORM  关键词：jpa persistence context &amp;quot;dirty check&amp;quot; JPA: Persistence Context And Dirty Check Mechanism | Thameena | Developer Journal 目标：理解entity如何状态变化，以及为什么这么设计，解决了什么问题。【看起来就是ORM的普遍问题？】</description>
    </item>
    
    <item>
      <title>改善拖延和习惯</title>
      <link>https://ryokki.github.io/posts/%E6%8B%96%E5%BB%B6-%E4%B9%A0%E6%83%AF/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/posts/%E6%8B%96%E5%BB%B6-%E4%B9%A0%E6%83%AF/</guid>
      <description> 每個人都是拖延症患者,怎麼克服拖延症？ - 全职妈妈爱生活 早睡 我是如何改掉熬夜這個習慣的？睡的好才能學的好。 - 全职妈妈爱生活（后面看）  什么是拖延 - learn from Inside the mind of a master procrastinator。 脑子里： 即时满足的猴子 + 理性决策的思考者。这个猴子眼中没有任何未来的规划，only for easy and fun. 这种即时满足在原始时代没有问题。
拖延症就是即时满足的猴子占据了大部分时间。在不该即时满足的即时满足的时候得到的快乐不是快乐，因为会带来内疚和自我憎恨。
只有恐慌panic monster会驱逐这个猴子（DDL..),
而且DDL快来的时候，这个猴子还会开始做无意义的事情，明明没有乐趣的事情，也不愿意开始做那个重要的事情
(太真实)
因为拖延严重影响了生活，带来了强烈的挫败感
 with deadline: 拖延是有限的 no deadline: 往往是没有下文了，因为panic monster不会出现。这些往往不被发现，但是大量长期不快乐、内疚的来源。活的像一个旁观者（真实  改善拖延的做法  番茄钟 為什麼番茄鐘工作法這麼強大？Coursera Learning How To Learn《學習如何學習》心得1 - 全职妈妈爱生活 先做最困难最重要的事。 避免掉入僵尸模式（例如起床后刷b站，一下就是一个小时），要意识到这些trigger、形成新习惯（例如规定一起床要做什么事）、改变地点（比如去图书馆） 不要使用意志力。意志力是一项宝贵的资源，也是需要耗费大脑非常多的能量。应该把意志力用在更有价值的地方，比如专注于对我们重要但是很有难度的任务上面。【所以我应该尽可能远离诱惑】 让自己有好的状态-运动/睡眠的重要性，状态好更容易正向思考以及主动 保有信念，I can do it.我们拖延主要是我们大脑会觉得很难，所以我们会主动逃避，避免痛苦。如果我们改变信念，觉得自己可以做到，就可以欺骗大脑，避免大脑主动逃避拖延。【或者降低目标，不要求做的多好，目标是做个破烂出来就行】 设定截止时间。设定每天工作或任务的截止时间一方面是奖励一些时间给自己，这个时间就是可以随意享受的时间，另一方面是让自己大脑充电，让第二天更有效率。现在我每天都会设定9:30后就关掉电脑关掉手机，敷面膜、泡澡或者看电影，然后睡前在看一会书。 奖励自己。当我们真的改掉一个坏习惯，养成一个好习惯的时候，要好好奖励自己。比如我现在每天都会写作2个番茄钟，如果我这一个月都可以做到，我就排除万难去看一部电影。  </description>
    </item>
    
    <item>
      <title>Git Internal（施工中）</title>
      <link>https://ryokki.github.io/posts/git-internal/</link>
      <pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/posts/git-internal/</guid>
      <description>Reference
 Git Doc: All commands Git Pro2 Understanding Git — Data Model. GIt is a great and powerful VCS but can… | by Zvonimir Spajic | Medium Deep Dive Into Git • Edward Thomson • GOTO 2015 - YouTube You searched for database internal - The GitHub Blog 这里有五篇git internal，看起来更deep，可以做完gitlet后看，或者瓶颈时看 从 Commit 到 Branch，一文明白 git 到底怎么回事 - 掘金 （写的巨好） 从 Commit 到 Branch，一文明白 git 到底怎么回事 - Chenyu&amp;rsquo;s Blog （原理 OR 实现 OR 提交 &amp;ldquo;commits-are-snapshots-not-diffs&amp;rdquo;） Commits are snapshots, not diffs - The GitHub Blog : r/programming git 工作原理与撤销操作图解 | Shall We Code?</description>
    </item>
    
    <item>
      <title>git学习</title>
      <link>https://ryokki.github.io/posts/git%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Thu, 25 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/posts/git%E5%AD%A6%E4%B9%A0/</guid>
      <description>All entity
 working area/ staging area: 工作区和暂存区，这里是所有这次改动的信息（基于branch latest commit {snapshot}） commit: commit 是 tree + parents + log  root tree id: snapshot of file system commit info: commit message，author, time parent commit id: commit list   tree: snapshot of file system under the dir, blob: snapshot of file branch:a pointer to latest commit, it&amp;rsquo;s the base of working area  Point
 all object(commit, tree, blob) 都是不可变的，因为只要内容变了，id sha就会变。  New learning from blog</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ryokki.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/about/</guid>
      <description>love cs and kkbabe.</description>
    </item>
    
  </channel>
</rss>
