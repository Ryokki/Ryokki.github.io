<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog</title>
    <link>https://ryokki.github.io/posts/</link>
    <description>Recent content in Posts on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 16 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ryokki.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计优惠券系统(更新中)</title>
      <link>https://ryokki.github.io/posts/%E8%AE%BE%E8%AE%A1%E4%BC%98%E6%83%A0%E5%88%B8%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/posts/%E8%AE%BE%E8%AE%A1%E4%BC%98%E6%83%A0%E5%88%B8%E7%B3%BB%E7%BB%9F/</guid>
      <description>References:
 不会敲代码了 https://www.processon.com/diagraming/664472aaffdb264e78b5e231 谷粒商城 表结构可以参考 https://zhuanlan.zhihu.com/p/520220966 优惠券系统应该如何设计？ vivo优惠券设计 优惠卷 | EhFCptePcp - Xmind 电商系统：优惠券介绍(一) | 人人都是产品经理  vivo优惠券设计 目前，优惠券系统覆盖了优惠券的4个核心要点：创、发、用、计。
 **“创”**指优惠券的创建，包含各种券规则和使用门槛的配置。 **“发”**指优惠券的发放，优惠券系统提供了多种发放优惠券的方式，满足针对不同人群的主动发放和被动发放。 **“用”**指优惠券的使用，包括正向购买商品及反向退款后的优惠券回退。 **“计”**指优惠券的统计，包括优惠券的发放数量、使用数量、使用商品等数据汇总。  提供通用的优惠券服务，独立后的系统架构如下：
为满足各种不同场景的发券需求，优惠券系统提供三种发券方式：统一领券接口、后台定向发券、券码兑换发放。
券和商品之间的关系 优惠券的使用需要和商品关联，可关联所有商品，也可以关联部分商品。为了灵活性地满足运营对于券关联商品的配置，优惠券系统有两种关联方式：
 a. 黑名单。
可用商品 = 全部商品 - 黑名单商品。
黑名单适用于券的可使用商品范围比较广这种情况，全部商品排除掉黑名单商品就是券的可使用范围。
b. 白名单。
可用商品 = 白名单商品。
白名单适用于券的可使用商品范围比较小这种情况，直接配置券的可使用商品。
 除此以外，还有超级黑名单的配置，黑名单和白名单只对单个券有效，超级黑名单对所有券有效。当前优惠券系统提供商品级的关联，后续优惠券会支持商品分类维度的关联，分类维度 + 商品维度可以更灵活地关联优惠券和商品。
思维导图 我们这个优惠券和电商的优惠券有很大的不同
 我们的使用范围一般是指定某些商品，但是电商是指定单品的 我们现在只支持事件触发吧（绑定promoCode后、新用户注册后、我们应该没有主动领券的流程吧，电商是去店铺或者什么地方主动领一些券，是这个店铺给的优惠。但我们是主动给）  需要产品确认下优惠券名字 显示
表结构 coupon_rule:
  id bigint [primary key]
  coupon_rule_type text
  threshold_amount decimal</description>
    </item>
    
    <item>
      <title>design pattern(todo)</title>
      <link>https://ryokki.github.io/posts/design-pattern/</link>
      <pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/posts/design-pattern/</guid>
      <description>References:
 GitHub - Jueee/design-patterns: 《设计模式:可复用面向对象软件的基础》学习笔记  GitHub - ukihsoroy/design-pattern: 🐱‍🏍你不能不学的设计模式合集。    </description>
    </item>
    
    <item>
      <title>jimmer</title>
      <link>https://ryokki.github.io/posts/jimmer/</link>
      <pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/posts/jimmer/</guid>
      <description>References  官方文档  初识 。。。 好多没看懂 先跳过
快速预览 这里，列举三个实体类型，BookStore、Book、Author和TreeNode，作为当前章节所有讨论的前提假设。 @Entity public interface BookStore { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) Long id(); String name(); @Nullable String website(); @OneToMany(mappedBy = &amp;#34;store&amp;#34;) List&amp;lt;Book&amp;gt; books(); } @Entity public interface Book { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) Long id(); @Key String name(); @Key int edition(); BigDecimal price(); @Nullable @ManyToOne BookStore store(); @ManyToMany List&amp;lt;Author&amp;gt; authors(); } @Entity public interface Author { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) UUID id(); @Key String firstName(); @Key String lastName(); Gender gender(); @ManyToMany(mappedBy = &amp;#34;authors&amp;#34;) List&amp;lt;Book&amp;gt; books(); } 任意动态查询 BookTable table = Tables.</description>
    </item>
    
    <item>
      <title>jpa entity lifecycle</title>
      <link>https://ryokki.github.io/posts/jpa-entity-lifecycle/</link>
      <pubDate>Sun, 12 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/posts/jpa-entity-lifecycle/</guid>
      <description>Entity Lifecycle Model in JPA &amp;amp; Hibernate Spring Data JPA: Entity Lifecycle Model | by Suraj Mishra | Javarevisited | Medium、 Hibernate Persistence Context and Object’s LifeCycle | MyArchiBook language agnostic - Using an ORM or plain SQL? - Stack Overflow Hibernate Proxies - Why they&amp;rsquo;re used and how to unproxy them What is Object/Relational Mapping? - Hibernate ORM  关键词：jpa persistence context &amp;quot;dirty check&amp;quot; JPA: Persistence Context And Dirty Check Mechanism | Thameena | Developer Journal 目标：理解entity如何状态变化，以及为什么这么设计，解决了什么问题。【看起来就是ORM的普遍问题？】</description>
    </item>
    
    <item>
      <title>Git Internal（施工中）</title>
      <link>https://ryokki.github.io/posts/git-internal/</link>
      <pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/posts/git-internal/</guid>
      <description>Reference
 Git Doc: All commands Git Pro2 Understanding Git — Data Model. GIt is a great and powerful VCS but can… | by Zvonimir Spajic | Medium Deep Dive Into Git • Edward Thomson • GOTO 2015 - YouTube You searched for database internal - The GitHub Blog 这里有五篇git internal，看起来更deep，可以做完gitlet后看，或者瓶颈时看 从 Commit 到 Branch，一文明白 git 到底怎么回事 - 掘金 （写的巨好） 从 Commit 到 Branch，一文明白 git 到底怎么回事 - Chenyu&amp;rsquo;s Blog （原理 OR 实现 OR 提交 &amp;ldquo;commits-are-snapshots-not-diffs&amp;rdquo;） Commits are snapshots, not diffs - The GitHub Blog : r/programming git 工作原理与撤销操作图解 | Shall We Code?</description>
    </item>
    
    <item>
      <title>git学习</title>
      <link>https://ryokki.github.io/posts/git%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Thu, 25 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ryokki.github.io/posts/git%E5%AD%A6%E4%B9%A0/</guid>
      <description>All entity
 working area/ staging area: 工作区和暂存区，这里是所有这次改动的信息（基于branch latest commit {snapshot}） commit: commit 是 tree + parents + log  root tree id: snapshot of file system commit info: commit message，author, time parent commit id: commit list   tree: snapshot of file system under the dir, blob: snapshot of file branch:a pointer to latest commit, it&amp;rsquo;s the base of working area  Point
 all object(commit, tree, blob) 都是不可变的，因为只要内容变了，id sha就会变。  New learning from blog</description>
    </item>
    
  </channel>
</rss>
