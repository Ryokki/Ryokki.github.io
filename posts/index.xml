<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on XKJ Blog</title>
    <link>https://ryokki.github.io/posts/</link>
    <description>Recent content in Posts on XKJ Blog</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 30 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ryokki.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从typeTag浅窥java泛型</title>
      <link>https://ryokki.github.io/posts/015.-%E4%BB%8Etypetag%E6%B5%85%E7%AA%A5java%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Tue, 30 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/015.-%E4%BB%8Etypetag%E6%B5%85%E7%AA%A5java%E6%B3%9B%E5%9E%8B/</guid>
      <description>#todo&#xA;多种语言的泛型分别如何实现，优劣。&#xA;第二十章 泛型 · 《On Java 8》中文版&#xA;为什么 Go 语言没有泛型 - 面向信仰编程&#xA;Java 泛型 - HackMD&#xA;条条大路通罗马，各语言的泛型实现比较：CPP JAVA GO – 杰峰的博客&#xA;typeTag实现 用typeTag前 以前的写法中，从arguments中get出来的就是一个Object类型的，然后再uncheckCast成一个指定的类型。这样有个明显的坏处，每次从arguments拿东西都需要我们指定类型，很麻烦也很容易出错&#xA;{ Map&amp;lt;String, Object&amp;gt; arguments; Map&amp;lt;String, Object&amp;gt; whereArgument = Utils.uncheckedCast(arguments.get(GraphQLConstants.WHERE)); List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; orderByCondition = Utils.uncheckedCast(arguments.get(GraphQLConstants.ORDER_BY)); } 用typeTag后 从arguments中拿where，value的类型是确定的&#xA;class TypeTag&amp;lt;T&amp;gt; { String key; TypeReference&amp;lt;T&amp;gt; type; } class TypeTags { public static TypeTag&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; WHERE = TypeTaggingUtils.tag(&amp;#34;where&amp;#34;, new TypeReference&amp;lt;Map&amp;lt;String, Object&amp;gt;() {}); } class TypeTagUtils { public static &amp;lt;T&amp;gt; TypeTag&amp;lt;T&amp;gt; tag(String key, TypeReference&amp;lt;T&amp;gt; typeReference) { return new TypeTag&amp;lt;&amp;gt;(key ,typeReference); } public static &amp;lt;T&amp;gt; T get(Map&amp;lt;String, Object&amp;gt; data, TypeTag&amp;lt;T&amp;gt; typeTag) { return (T) data.</description>
    </item>
    <item>
      <title>redisLock vs dbLock</title>
      <link>https://ryokki.github.io/posts/014.-redislock-vs-dblock/</link>
      <pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/014.-redislock-vs-dblock/</guid>
      <description>redis lock example: https://p.functorz.work/D19537 修买项目版本后，创建两条projectResourceSource的bug. 原因是生成projectResourceSource的地方是加了锁的，但是当线程A和线程B同时跑processControllableProjectResource的时候&#xA;A 拿到事务 B 拿到事务 A 进去生成projectResourceSource 3跑完后，B也进去生成projectResourceSource，由于事务开启的时候是在3之前，所以看到的projectResourceSource是空的，所以又会生成projectResourceSource @Transactional @GlobalSynchronized( key = &amp;#34;&amp;#39;generateProjectPlanResourceSource_&amp;#39; + #projectId + &amp;#39;_&amp;#39; + #resourceType&amp;#34;, autoReleaseMillis = 600_000) // functionC public void generateProjectPlanResourceSource(long projectId, ResourceType resourceType) {} @Transactional @TrackExecutionTime @GlobalSynchronized( key = &amp;#34;&amp;#39;processAndSaveCumulativeProjectResourceUsage_&amp;#39; + #projectId + &amp;#39;_&amp;#39; + #resourceType&amp;#34;, autoReleaseMillis = 600_000) // functionB public ProjectResourceUsage processAndSaveCumulativeProjectResourceUsage( long projectId, ResourceType resourceType, boolean calculateConsumption) { resourceSourceService.generateOrganizationSharedResource( organizationService.getOrganizationByProjectId(projectId).getId(), resourceType); resourceSourceService.generateProjectPlanResourceSource(projectId, resourceType); // xxx } @Transactional @GlobalSynchronized(key = &amp;#34;&amp;#39;processProjectResource_&amp;#39; + #projectId&amp;#34;, autoReleaseMillis = 600_000) // 新加的 @TrackExecutionTime // functionA public void processControllableProjectResource() { // xxx processAndSaveCumulativeProjectResourceUsage(); // xxx } 如果没有在functionC加这个锁，事务A跑完了functionC还没提交，此时事务B进functionC会重复创建source。 本质上是functionC不单单不能同时进，而且要等上一个进的事务提交后才能进。 所以，如果该方法不是事务的第一个方法，不太适合用redis lock。 如果改成用dbLock就不会有这个问题。比如直接在functionC里面用一个dbLock，这个可以确保要等第一个事务提交后，才会跑这个dbLock查询。</description>
    </item>
    <item>
      <title>悲观锁和乐观锁</title>
      <link>https://ryokki.github.io/posts/013.-%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/</link>
      <pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/013.-%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/</guid>
      <description>这两个都写的很好，看看他们写的其他的&#xA;复盘笔记 [10 CAS与原子操作 | 深入浅出Java多线程](https://redspider.gitbook.io/concurrent/di-er-pian-yuan-li-pian/10 疑问：&#xA;悲观锁和乐观锁的本质区别是啥，啥时候用哪个？ TODO 性能测试？ 悲观锁平时用的很多了，主要看看乐观锁。&#xA;悲观锁和乐观锁其实不是一种特定的锁，而是一种并发写的流程。 悲观锁如下：&#xA;publiv void process(resource) { // step1. fetch and lock someThing = getSomeThingLocked(resource); // step2. calculate new newSomeThing = getNewSomeTing(someThing); // step3. update updateSomeThing(resource); } 乐观锁其实不是一种锁，而是一种并发写的流程。如下&#xA;publiv void process(resource) { // step1. fetch someThing = getSomeThing(resource); // step2. calculate new newSomeThing = getNewSomeTing(someThing); // step3. update (check nothing changed) updateSomeThingIfNothingChanged(resource); } 他们的核心区别在于上锁时机。悲观锁在查数据的时候就上锁，计算和更新操作都是被锁住的状态。如果计算相比更新很耗时的话，就会有大量的锁的时间浪费在计算上了。而乐观锁只在更新时上一个用户态的锁，检查是否已经被更新过了。&#xA;case1. AtomicLong public final long getAndIncrement() { return U.</description>
    </item>
    <item>
      <title>prometheus basic</title>
      <link>https://ryokki.github.io/posts/011.-prometheus-basic/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/011.-prometheus-basic/</guid>
      <description>https://zionbackend.functorz.com/actuator/prometheus&#xA;What&amp;rsquo;s prometheus?&#xA;losevka setup scrape metrics: in prometheus:&#xA;scrape_configs: - job_name: &amp;#39;spring-boot-application&amp;#39; metrics_path: &amp;#39;/actuator/prometheus&amp;#39; scrape_interval: 15s # This can be adjusted based on our needs static_configs: - targets: [&amp;#39;localhost:8080&amp;#39;] </description>
    </item>
    <item>
      <title>深入理解Stream流-part1-介绍</title>
      <link>https://ryokki.github.io/posts/stream/stream%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90part1%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 04 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/stream/stream%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90part1%E4%BB%8B%E7%BB%8D/</guid>
      <description>References GitHub - CarpenterLee/JavaLambdaInternals: 深入理解Java函数式编程和Streams API 浅谈 jdk 中的 Stream 流使用及原理 - 掘金 Java Stream 源码深入解析_Java_Zexho_InfoQ写作社区 Java 8 Stream原理解析 - vivo互联网技术 - 博客园 《流》 —— Java Stream原理解析，它为什么这么简洁又这么好用？ - 掘金 Streams under the hood - IBM Developer Understanding Java Streams » The Bored Dev Java Streams – Parallel and Declarative – Basics Strong examples/example-misc/src/main/java/com/youthlin/example/stream at master · youthlin/examples · GitHub 类图 sink和AbstrackPipeline什么区别&#xA;Stream&amp;lt;Integer&amp;gt; sourceStream = List.of(8, 1, 1, 2, 2, 3, 4, 5, 6).</description>
    </item>
    <item>
      <title>深入理解Stream流-part2-源码</title>
      <link>https://ryokki.github.io/posts/stream/stream%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90part2%E6%BA%90%E7%A0%81/</link>
      <pubDate>Thu, 04 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/stream/stream%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90part2%E6%BA%90%E7%A0%81/</guid>
      <description></description>
    </item>
    <item>
      <title>深入理解Stream流-part3-总结</title>
      <link>https://ryokki.github.io/posts/stream/stream%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90part3%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 04 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/stream/stream%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90part3%E6%80%BB%E7%BB%93/</guid>
      <description></description>
    </item>
    <item>
      <title>深入理解Stream流-part4-实现</title>
      <link>https://ryokki.github.io/posts/stream/stream%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90part4%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 04 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/stream/stream%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90part4%E5%AE%9E%E7%8E%B0/</guid>
      <description></description>
    </item>
    <item>
      <title>sql join strategies</title>
      <link>https://ryokki.github.io/posts/010.-sql-join-strategies/</link>
      <pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/010.-sql-join-strategies/</guid>
      <description>#postgresql&#xA;SELECT * FROM orders JOIN customers ON orders.customer_id = customers.id; https://blog.japinli.top/2021/07/join-stragegies-and-performance-in-postgresql/&#xA;Nested Loop Join A join B, select all A and iterate A, for each A row, get matched B rows, and insert into results. Obviously, if outer table A is too large, will select B too frequently.It&amp;rsquo;s better for small outer table. 由于按顺序扫描外部关系，因此外部关系上的任何索引都无济于事。但是内部关系的连接键上的索引可以大大加快嵌套循环连接的速度。 如果外部关系很小，嵌套循环连接就特别有效，因为这样内部循环就不会被频繁执行。这是在具有规范化数据模型的 OLTP 工作负载中使用的典型的连接策略，它的效率很高。如果外层关系很大，嵌套的循环连接通常是非常低效的，即使它们被内部关系的索引所支持. Hash Join 查customer表，根据customer的id创建hash table(id -&amp;gt; customer). 查询一遍表orders，对于orders的每一行记录，去hash table找这个记录 首先，PostgreSQL 按顺序扫描内部关系并建立一个哈希表，其中哈希键由所有使用=操作符的连接键组成。然后，它按顺序扫描外部关系，并为找到的每一条记录探测哈希，以找到匹配的连接键。这有点类似于一个嵌套的循环连接。建立哈希表是一个额外的启动工作，但是探测哈希表要比扫描内部关系快得多。 如果涉及的关系都不小，但较小的表的哈希表在 work_mem 内，那么哈希连接是最好的。这是因为，否则 PostgreSQL 会分批建立哈希表，并将其存储在临时磁盘文件中，这将损害性能。在这种情况下，优化器通常会选择一个不同的连 接策略，比如合并(Merge)连接。 Merge Join 同时扫描orders和customers，都按照customer id升序搜索 在join比较的条件是有序的情况下，可以同时顺序扫描 如果涉及的关系对于适合 work_mem 的散列来说都太大了，优化器通常会选择合并连接。所以这是连接真正大表的最佳策略。 BitMap Scan https://www.</description>
    </item>
    <item>
      <title>简单过一遍ostep</title>
      <link>https://ryokki.github.io/posts/003.-ostep/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/003.-ostep/</guid>
      <description>References&#xA;OSTEP笔记1–CPU虚拟化 – JciX ~ </description>
    </item>
    <item>
      <title>重学csapp</title>
      <link>https://ryokki.github.io/posts/000.-csapp/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/000.-csapp/</guid>
      <description>为什么要重学？大三的时候花了三个月把csapp的主要部分学了，但是当时很多都是浅尝辄止，很多问题都选择先跳过而不是追问。包括lab也没有做完。 这次的目标是选择大概1/2的内容，进行深入的学习，包括习题和lab。 重点是：关注细节～包括知识和lab实现上的细节。最好和os(如ostep)一起扩展学习～ 还有一点就是，学之前先把问题背景想清楚，先自己想想会如何解决，例如虚拟内存，要想到这个解决的问题 1. 地址转换的问题（最简单是base and bound实现）2. 这种方法有内部碎片，code、heap、stack不连续 3.解决方法，每个segment都设一个base and bound，这样内部碎片解决了，但是外部碎片问题仍然没有解决。（空闲空间都不连续）4.后面提出了分页(paging来解决)&#xA;🌟ch3-程序的机器级表示。不用关心一些指令的具体细节，主要关心C语言常用的一些语法，在汇编中是怎么样，例如switch，while-loop。以及函数调用规则～最好能理解到更抽象的栈调用原理。Bomb lab认真做完～ attack lab做几个即可&#xA;ch6-存储器层次结构。这个应该很简单的～快速过一下，做掉作业和cache lab.(学习过程中不要轻易跳过书中模拟地址翻译的题目，多模拟几遍才能理解透彻。) 有个可视化工具 【CSAPP可视化Cache模拟器の正确性检验】 https://www.bilibili.com/video/BV1tt421g7ZK/?share_source=copy_web&amp;amp;vd_source=2e917943b1fdd40ab01d1959390b5388 第06章：存储器层次结构 | CSAPP重点解读&#xA;ch7-链接：之前学的时候就没太学明白，包括库打桩、ELF解析等。可以略过，或者简单看看符号表相关知识即可～ 很多人都推荐看《程序员的自我修养》，我肯定先不看了～不需要学这个 学了也会忘记 完全用不上&#xA;🌟ch8-异常控制流。讲解操作系统异常、进程调度、信号等概念。这部分要完整认真学，可以结合jyy的课去补充，shell lab也要认真做，要弄明白管道等的实现。&#xA;🌟ch9-虚拟内存，这是计算机系统一个很好的抽象～ 程序员不直接操作物理内存，只操作虚拟内存，这样在虚拟内存这个抽象层可以完成disk-swap-space等功能。这章是malloc lab～ 据说有比较多的细节，认真完成&#xA;ch-10 系统级IO，ch-11 网络编程和 ch-12 并发编程，都没有深入讲。浅尝辄止即可，做proxyLab.&#xA;dadaLab要求大家用限制好的位运算完成它要求的操作&#xA;bombLab要求大家根据提示阅读汇编代码，输入对应的正确输入拆掉炸弹，如果输入错误炸弹就会爆炸整个实验就会失败。这个实验的整体设定和难度安排都非常有意思，强烈建议大家必做&#xA;attackLab要求大家利用缓冲区溢出，来进行攻击模拟当黑客的感觉，同时可以学会如何预防这些攻击手段&#xA;cacheLab要求大家模拟实现一个cache和对矩阵转置进行优化，如何能够写出一个满分的代码，非常有挑战性&#xA;shellLab要求大家实现一个简易的shell程序。这个实验需要考虑信号并发会出现的一些问题。&#xA;mallocLab需要大家实现一个malloc程序。帮助大家理解内存分配和管理&#xA;proxyLab要求写一个支持HTML的多线程Server。可以帮助熟悉Unix网络编程与多线程的控制与同步。&#xA;下面别人是学习经验的参考&#xA;不建议看任何网课，包括该书作者在 CMU 录制的课。这本书的内容相当丰富，而且讲解的很清晰，难度曲线上升很缓慢，直接耐心啃书就好。 每个章节的 exercise 一定要做！这些习题都是作者精心设计用来巩固当前学习内容的，尤其是前六章和第九章的习题设计的非常好，后面还附上了细致的解析，做完对知识的理解大有好处。 任务驱动式学习。我读这本书时定下的目标是每个周末做完一个 lab，一个 lab 基本上对应书中的一个章节。这也就意味着我每周要至少读完一个章节，有了这种明确的目标，我的学习效率大大提升 作者：潜龙勿用&#xA;链接：https://www.zhihu.com/question/20402534/answer/2655186100&#xA;来源：知乎&#xA;作者：朝闻君&#xA;链接：https://www.zhihu.com/question/20402534/answer/1690365409&#xA;来源：知乎&#xA;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&#xA;首先谈一谈日常的奇奇怪怪中文译名，csapp本意并不是深入理解，而是“程序员的视角”，a programmer&amp;rsquo;s perspective，与之相对，是系统开发者的视角（这是我们院长作为csapp的引进者的原话，这句话的解释让我至今记忆犹新），换而言之，就是要让程序员学会如何调包。&#xA;了解了这个，应该可以先定个基调了，这是本操作系统入门书，而不是所谓读一本就精通os的万灵药。所以无论是北大上交还是cmu，这本书都是作为大一大二的ICS计算机系统导论课进行教学。&#xA;书中对于os的各个范畴都做了全面的描述，但是全面而不深入。例如，在调度方面，ostep讲的多级反馈队列，完全公平调度就更贴近现代os的实现。在内存分配方面，书中提到的也是最原始的实现，所以我之前写笔记文章的时候很多人也会质疑这个实现。在cpu方面，也只涉及到了基本的harzard。&#xA;但是全面而不深入并不是贬义词，因为如果要深入，那么csapp的页数至少还要再翻好几倍。csapp给人提供的是视角，正如书名所说，读了这本书之后，**你会去开始思考代码的底层运作原理，而不是把os当做黑盒，**也许书中提到的原理并不是最先进的，但是授人以渔比授人以鱼更重要。你会去更多地挖掘，其他情况下，csapp没有提到的那些机制和策略，它们的实现是什么。</description>
    </item>
    <item>
      <title>【读书笔记】A Philosophy of Software Design</title>
      <link>https://ryokki.github.io/posts/012.-a-philosophy-of-software-design/</link>
      <pubDate>Wed, 22 May 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/012.-a-philosophy-of-software-design/</guid>
      <description>为什么读这本书？这本书主要关于设计软件系统以最小化其复杂性，而控制复杂度是程序员的关键能力之一。&#xA;Reference 资料：&#xA;软件设计的哲学第二版中文翻译 By Yingang A Philosophy of Software Design | John Ousterhout | Talks at Google - YouTube A Philosophy of Software Design 读书笔记(great)：&#xA;https://blog.pragmaticengineer.com/a-philosophy-of-software-design-review/ Philosophy of Software Design 第九章 - 合并还是拆分 《A Philosophy of Software Design》心得 2 — 透过模组设计降低软件复杂度，从介面开始｜ExplainThis 读书笔记(normal)&#xA;Massive Technical Interviews Tips: A Philosophy of Software Design A Philosophy of SoftwareDesign - 知乎 [[02. naughty 读书笔记：A Philosophy of Software Design]] 降低软件复杂性一般原则和方法 - 美团技术团队 1-3 复杂度 模块的复杂度 = 模块内部复杂度 + 模块外部复杂度</description>
    </item>
    <item>
      <title>如何阅读源代码——以一个tiny git实现为例</title>
      <link>https://ryokki.github.io/posts/006.-%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E6%BA%90%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Sun, 19 May 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/006.-%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E6%BA%90%E4%BB%A3%E7%A0%81/</guid>
      <description>References 如何阅读一份代码？ 我是怎么读代码的 如何阅读一份源代码？（2020年版） 先通过文档了解全景，再逐步深入代码 多问自己几个问题。为什么选择这个数据结构来描述这个问题？类似的场景下，其他项目是怎么设计的？都有哪些数据结构做这样的事情？ 一边读一边记录，还要复盘 最后要总结输出&#xA;记一个读tiny git实现的例子 流程&#xA;git init git status echo hello &amp;gt; hello; git add . git commit -m &amp;ldquo;create hello file&amp;rdquo; init后文件如下&#xA;kkbabe in ~/myproject/rezero_git/.zit on main ● λ cat HEAD ref: refs/heads/main% kkbabe in ~/myproject/rezero_git/.zit on main ● λ ls HEAD index objects status测试&#xA;添加hello 更新hello 删掉hello 添加world </description>
    </item>
    <item>
      <title>design pattern(todo)</title>
      <link>https://ryokki.github.io/posts/004.-design-pattern-todo/</link>
      <pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/004.-design-pattern-todo/</guid>
      <description>References:&#xA;GitHub - Jueee/design-patterns: 《设计模式:可复用面向对象软件的基础》学习笔记 GitHub - ukihsoroy/design-pattern: 🐱‍🏍你不能不学的设计模式合集。 GitHub - fuzhengwei/itstack-demo-design: :art: 《重学Java设计模式》是一本互联网真实案例实践书籍。以落地解决方案为核心，从实际业务中抽离出，交易、营销、秒杀、中间件、源码等22个真实场景，来学习设计模式的运用。欢迎关注小傅哥，微信(fustack)，公众号：bugstack虫洞栈，博客：https://bugstack.cn design-pattern 装饰设计（装饰者模式 / 装饰器模式） Design Pattern Catalog | Java Design Patterns GitHub - iluwatar/java-design-patterns: Design patterns implemented in Java 很好 设计模式的艺术 我看是豆瓣评分最高的 (GitHub - quanke/design-pattern-java: 设计模式 Java版本) 设计模式概述 以工厂模式为例，看看上面refer哪些好一点</description>
    </item>
    <item>
      <title>jimmer</title>
      <link>https://ryokki.github.io/posts/008.-jimmer/</link>
      <pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/008.-jimmer/</guid>
      <description>References 官方文档 初识 。。。 好多没看懂 先跳过&#xA;快速预览 这里，列举三个实体类型，BookStore、Book、Author和TreeNode，作为当前章节所有讨论的前提假设。 @Entity public interface BookStore { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) Long id(); String name(); @Nullable String website(); @OneToMany(mappedBy = &amp;#34;store&amp;#34;) List&amp;lt;Book&amp;gt; books(); } @Entity public interface Book { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) Long id(); @Key String name(); @Key int edition(); BigDecimal price(); @Nullable @ManyToOne BookStore store(); @ManyToMany List&amp;lt;Author&amp;gt; authors(); } @Entity public interface Author { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) UUID id(); @Key String firstName(); @Key String lastName(); Gender gender(); @ManyToMany(mappedBy = &amp;#34;authors&amp;#34;) List&amp;lt;Book&amp;gt; books(); } 任意动态查询 BookTable table = Tables.</description>
    </item>
    <item>
      <title>jpa entity lifecycle</title>
      <link>https://ryokki.github.io/posts/009.-jpa-entity-lifecycle/</link>
      <pubDate>Sun, 12 May 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/009.-jpa-entity-lifecycle/</guid>
      <description>Entity Lifecycle Model in JPA &amp;amp; Hibernate Spring Data JPA: Entity Lifecycle Model | by Suraj Mishra | Javarevisited | Medium、 Hibernate Persistence Context and Object’s LifeCycle | MyArchiBook language agnostic - Using an ORM or plain SQL? - Stack Overflow Hibernate Proxies - Why they&amp;rsquo;re used and how to unproxy them What is Object/Relational Mapping? - Hibernate ORM 关键词：jpa persistence context &amp;quot;dirty check&amp;quot; JPA: Persistence Context And Dirty Check Mechanism | Thameena | Developer Journal 目标：理解entity如何状态变化，以及为什么这么设计，解决了什么问题。【看起来就是ORM的普遍问题？】</description>
    </item>
    <item>
      <title>改善拖延和习惯</title>
      <link>https://ryokki.github.io/posts/002.-%E6%8B%96%E5%BB%B6--%E4%B9%A0%E6%83%AF/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/002.-%E6%8B%96%E5%BB%B6--%E4%B9%A0%E6%83%AF/</guid>
      <description> 每個人都是拖延症患者,怎麼克服拖延症？ - 全职妈妈爱生活 早睡 我是如何改掉熬夜這個習慣的？睡的好才能學的好。 - 全职妈妈爱生活（后面看） 什么是拖延 - learn from Inside the mind of a master procrastinator。 脑子里： 即时满足的猴子 + 理性决策的思考者。这个猴子眼中没有任何未来的规划，only for easy and fun. 这种即时满足在原始时代没有问题。&#xA;拖延症就是即时满足的猴子占据了大部分时间。在不该即时满足的即时满足的时候得到的快乐不是快乐，因为会带来内疚和自我憎恨。&#xA;只有恐慌panic monster会驱逐这个猴子（DDL..),&#xA;而且DDL快来的时候，这个猴子还会开始做无意义的事情，明明没有乐趣的事情，也不愿意开始做那个重要的事情&#xA;(太真实)&#xA;因为拖延严重影响了生活，带来了强烈的挫败感&#xA;with deadline: 拖延是有限的 no deadline: 往往是没有下文了，因为panic monster不会出现。这些往往不被发现，但是大量长期不快乐、内疚的来源。活的像一个旁观者（真实 改善拖延的做法 番茄钟 為什麼番茄鐘工作法這麼強大？Coursera Learning How To Learn《學習如何學習》心得1 - 全职妈妈爱生活 先做最困难最重要的事。 避免掉入僵尸模式（例如起床后刷b站，一下就是一个小时），要意识到这些trigger、形成新习惯（例如规定一起床要做什么事）、改变地点（比如去图书馆） 不要使用意志力。意志力是一项宝贵的资源，也是需要耗费大脑非常多的能量。应该把意志力用在更有价值的地方，比如专注于对我们重要但是很有难度的任务上面。【所以我应该尽可能远离诱惑】 让自己有好的状态-运动/睡眠的重要性，状态好更容易正向思考以及主动 保有信念，I can do it.我们拖延主要是我们大脑会觉得很难，所以我们会主动逃避，避免痛苦。如果我们改变信念，觉得自己可以做到，就可以欺骗大脑，避免大脑主动逃避拖延。【或者降低目标，不要求做的多好，目标是做个破烂出来就行】 设定截止时间。设定每天工作或任务的截止时间一方面是奖励一些时间给自己，这个时间就是可以随意享受的时间，另一方面是让自己大脑充电，让第二天更有效率。现在我每天都会设定9:30后就关掉电脑关掉手机，敷面膜、泡澡或者看电影，然后睡前在看一会书。 奖励自己。当我们真的改掉一个坏习惯，养成一个好习惯的时候，要好好奖励自己。比如我现在每天都会写作2个番茄钟，如果我这一个月都可以做到，我就排除万难去看一部电影。 </description>
    </item>
    <item>
      <title>Git Internal（已弃坑）</title>
      <link>https://ryokki.github.io/posts/001.-git-internal/</link>
      <pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/001.-git-internal/</guid>
      <description>Reference&#xA;Git Doc: All commands Git Pro2 Understanding Git — Data Model. GIt is a great and powerful VCS but can… | by Zvonimir Spajic | Medium Deep Dive Into Git • Edward Thomson • GOTO 2015 - YouTube You searched for database internal - The GitHub Blog 这里有五篇git internal，看起来更deep，可以做完gitlet后看 从 Commit 到 Branch，一文明白 git 到底怎么回事 - 掘金 （写的巨好） 从 Commit 到 Branch，一文明白 git 到底怎么回事 - Chenyu&amp;rsquo;s Blog （原理 OR 实现 OR 提交 &amp;ldquo;commits-are-snapshots-not-diffs&amp;rdquo;） Commits are snapshots, not diffs - The GitHub Blog : r/programming git 工作原理与撤销操作图解 | Shall We Code?</description>
    </item>
    <item>
      <title></title>
      <link>https://ryokki.github.io/posts/stream/%E6%9C%AA%E5%91%BD%E5%90%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ryokki.github.io/posts/stream/%E6%9C%AA%E5%91%BD%E5%90%8D/</guid>
      <description> 减少迭代次数 惰性求值 函数式，代码简洁 我们用例子1（无短路）&#xA;Stream.of(1,3,5,2,4,6) .filter(a -&amp;gt; a &amp;gt; 2) .map(a -&amp;gt; a * 10) .sorted .flatMap(Stream.of(a - 1, a)) .toList(); 例子2（有短路）&#xA;Stream.of(1,3,5,2,4,6) .filter(a -&amp;gt; a &amp;gt; 2) .map(a -&amp;gt; a * 10) .sorted .flatMap(Stream.of(a - 1, a)) .findAny(); 类比实际生活，我们可以将 Stream 流比作水流，中间操作则是相当于水流过程中的蓄水池，Sink则是每个蓄水池的操作者，终结操作则是下达指令的指挥官。此例中的操作可如下图： 图中4种_stream_接口继承自BaseStream，其中IntStream, LongStream, DoubleStream对应三种基本类型（int, long, double，注意不是包装类型），Stream对应所有剩余类型的_stream_视图。为不同数据类型设置不同stream接口，可以1.提高性能（避免拆箱和装箱），2.增加特定接口函数。&#xA;你可能会奇怪为什么不把IntStream等设计成Stream的子接口？毕竟这接口中的方法名大部分是一样的。答案是这些方法的名字虽然相同，但是返回类型不同，如果设计成父子接口关系，这些方法将不能共存，因为Java不允许只有返回类型不同的方法重载。&#xA;虽然大部分情况下stream是容器调用Collection.stream()方法得到的，但stream和collections有以下不同：&#xA;无存储。stream不是一种数据结构，它只是某种数据源的一个视图，数据源可以是一个数组，Java容器或I/O channel等。 为函数式编程而生。对stream的任何修改都不会修改背后的数据源，比如对stream执行过滤操作并不会删除被过滤的元素，而是会产生一个不包含被过滤元素的新stream。 惰式执行。stream上的操作并不会立即执行，只有等到用户真正需要结果的时候才会执行。 可消费性。stream只能被“消费”一次，一旦遍历过就会失效，就像容器的迭代器那样，想要再次遍历必须重新生成。 对_stream_的操作分为为两类，中间操作(intermediate operations)和结束操作(terminal operations)，二者特点是：&#xA;中间操作总是会惰式执行，调用中间操作只会生成一个标记了该操作的新stream，仅此而已。 结束操作会触发实际计算，计算发生时会把所有中间操作积攒的操作以_pipeline_的方式执行，这样可以减少迭代次数。计算完成之后_stream_就会失效。 </description>
    </item>
  </channel>
</rss>
